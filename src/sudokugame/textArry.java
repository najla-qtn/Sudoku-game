/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sudokugame;

import java.awt.Color;
import java.awt.Font;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JTextField;

/**
 *
 * @author Tshi
 */
public class textArry extends javax.swing.JFrame {

    /**
     * Creates new form textArry
     */
    public textArry() {
        initComponents();
        customComponat();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        butt_back = new javax.swing.JButton();
        lab_time = new javax.swing.JLabel();
        tf_time = new javax.swing.JTextField();
        lab_time1 = new javax.swing.JLabel();
        tf_time1 = new javax.swing.JTextField();
        p0 = new javax.swing.JPanel();
        p4 = new javax.swing.JPanel();
        p3 = new javax.swing.JPanel();
        p2 = new javax.swing.JPanel();
        p1 = new javax.swing.JPanel();
        p8 = new javax.swing.JPanel();
        p7 = new javax.swing.JPanel();
        p6 = new javax.swing.JPanel();
        p5 = new javax.swing.JPanel();
        p12 = new javax.swing.JPanel();
        p11 = new javax.swing.JPanel();
        p10 = new javax.swing.JPanel();
        p9 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setResizable(false);

        butt_back.setBackground(new java.awt.Color(255, 255, 255));
        butt_back.setForeground(new java.awt.Color(255, 255, 255));
        butt_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/icon_1.png"))); // NOI18N
        butt_back.setBorder(null);
        butt_back.setBorderPainted(false);
        butt_back.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        butt_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butt_backActionPerformed(evt);
            }
        });

        lab_time.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lab_time.setText("Time:");

        tf_time.setEditable(false);
        tf_time.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tf_time.setText("00:00");
        tf_time.setBorder(null);
        tf_time.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_timeActionPerformed(evt);
            }
        });

        lab_time1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lab_time1.setText("User name:");

        tf_time1.setEditable(false);
        tf_time1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tf_time1.setForeground(new java.awt.Color(153, 153, 153));
        tf_time1.setText("___________________");
        tf_time1.setBorder(null);
        tf_time1.setCaretColor(new java.awt.Color(255, 255, 255));
        tf_time1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_time1ActionPerformed(evt);
            }
        });

        p4.setBackground(new java.awt.Color(0, 0, 0));
        p4.setLayout(new java.awt.GridLayout(1, 3));

        p3.setBackground(new java.awt.Color(0, 0, 0));
        p3.setLayout(new java.awt.GridLayout(1, 3));

        p2.setBackground(new java.awt.Color(0, 0, 0));
        p2.setLayout(new java.awt.GridLayout(1, 3));

        p1.setBackground(new java.awt.Color(0, 0, 0));
        p1.setLayout(new java.awt.GridLayout(1, 3));

        p8.setBackground(new java.awt.Color(0, 0, 0));
        p8.setLayout(new java.awt.GridLayout(1, 3));

        p7.setBackground(new java.awt.Color(0, 0, 0));
        p7.setLayout(new java.awt.GridLayout(1, 3));

        p6.setBackground(new java.awt.Color(0, 0, 0));
        p6.setLayout(new java.awt.GridLayout(1, 3));

        p5.setBackground(new java.awt.Color(0, 0, 0));
        p5.setLayout(new java.awt.GridLayout(1, 3));

        p12.setBackground(new java.awt.Color(0, 0, 0));
        p12.setLayout(new java.awt.GridLayout(1, 3));

        p11.setBackground(new java.awt.Color(0, 0, 0));
        p11.setLayout(new java.awt.GridLayout(1, 3));

        p10.setBackground(new java.awt.Color(0, 0, 0));
        p10.setLayout(new java.awt.GridLayout(1, 3));

        p9.setBackground(new java.awt.Color(0, 0, 0));
        p9.setLayout(new java.awt.GridLayout(1, 3));

        javax.swing.GroupLayout p0Layout = new javax.swing.GroupLayout(p0);
        p0.setLayout(p0Layout);
        p0Layout.setHorizontalGroup(
            p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 310, Short.MAX_VALUE)
            .addGroup(p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(p0Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(p0Layout.createSequentialGroup()
                            .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(p0Layout.createSequentialGroup()
                            .addComponent(p3, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(p4, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(p0Layout.createSequentialGroup()
                            .addComponent(p5, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(p6, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(p0Layout.createSequentialGroup()
                            .addComponent(p7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(p8, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(p0Layout.createSequentialGroup()
                            .addComponent(p9, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(p10, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(p0Layout.createSequentialGroup()
                            .addComponent(p11, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(10, 10, 10)
                            .addComponent(p12, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        p0Layout.setVerticalGroup(
            p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 220, Short.MAX_VALUE)
            .addGroup(p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(p0Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(p1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(p3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(p4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(10, 10, 10)
                    .addGroup(p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(p5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(p6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(p7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(p8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(10, 10, 10)
                    .addGroup(p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(p9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(p10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(p0Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(p11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(p12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(butt_back, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lab_time)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(lab_time1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_time1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(p0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(55, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(butt_back, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lab_time)
                            .addComponent(tf_time, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lab_time1)
                    .addComponent(tf_time1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(p0, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(82, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void customComponat(){
        tf = new JTextField[6][6];
        initializeVar();
        addTFtoPannels();
        insertNumInBorder();
        tfAction();
    }
    
    void initializeVar(){
        for (int i = 0; i < 6; i++) {
            for (int j = 0; j < 6; j++) {
                tf[i][j] = new JTextField();
                tf[i][j].setBackground(Color.WHITE);
                tf[i][j].setHorizontalAlignment(0);
            }
        }
        
        checkNum = new CheckNumbers();
    
    }
    
    void addTFtoPannels(){
        // p1
        for (int i = 0; i < 1; i++) {
            for (int j = 0; j < 3; j++) {
                p1.add(tf[i][j]);
            }
        }
        
        // p2
        for (int i = 0; i < 1; i++) {
            for (int j = 3; j < 6; j++) {
                p2.add(tf[i][j]);
            }
        }
        
        // p3
        for (int i = 1; i < 2; i++) {
            for (int j = 0; j < 3; j++) {
                p3.add(tf[i][j]);
            }
        }
        
        // p4
        for (int i = 1; i < 2; i++) {
            for (int j = 3; j < 6; j++) {
                p4.add(tf[i][j]);
            }
        }
        
        // p5
        for (int i = 2; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                p5.add(tf[i][j]);
            }
        }
        
        // p6
        for (int i = 2; i < 3; i++) {
            for (int j = 3; j < 6; j++) {
                p6.add(tf[i][j]);
            }
        }
        
        // p7
        for (int i = 3; i < 4; i++) {
            for (int j = 0; j < 3; j++) {
                p7.add(tf[i][j]);
            }
        }
        
        // p8
        for (int i = 3; i < 4; i++) {
            for (int j = 3; j < 6; j++) {
                p8.add(tf[i][j]);
            }
        }
        
        // p9
        for (int i = 4; i < 5; i++) {
            for (int j = 0; j < 3; j++) {
                p9.add(tf[i][j]);
            }
        }
        
        // p10
        for (int i = 4; i < 5; i++) {
            for (int j = 3; j < 6; j++) {
                p10.add(tf[i][j]);
            }
        }
        
        // p11
        for (int i = 5; i < 6; i++) {
            for (int j = 0; j < 3; j++) {
                p11.add(tf[i][j]);
            }
        }
        
        // p12
        for (int i = 5; i < 6; i++) {
            for (int j = 3; j < 6; j++) {
                p12.add(tf[i][j]);
            }
        }
    }
    
    void insertNumInBorder(){
        
        Random rand = new Random();
        int randNumber;
        int row;
        int col;
        boolean checkRow = false;
        boolean checkCol = false;
        boolean checkRegion = false;
        
        for (int i = 0; i < 12; ) { // we will fill it by 4 static numbers
            randNumber = rand.nextInt(6)+1;
            row = rand.nextInt(2);
            col = rand.nextInt(6);
            
            // check if the val in database or not .. 0= not, otherwise is yes
                // if not in database than checked if col, row and region.
            if (checkNum.retriveValue(row, col) == 0) {
                // insert val in database
                checkNum.insertVal(row, col, randNumber);
                // check row from database
                checkRow = checkNum.foundInRow(row, col);
                // check col from database
                checkCol = checkNum.foundInCol(row, col);
                // check region from database
                checkRegion = checkRegion(row, col, randNumber);
                
                if (!checkRow || !checkCol || !checkRegion) { //restor deffulte value
                    checkNum.insertVal(row, col, 0);
                } 
                
            }else{ // pick another num, row and col
                continue;
            }
            
            // check row ..  return true
            // check col .. return true
            // check regoin ..  size == 1
            if (checkRow &&  checkCol && checkRegion){ // the val is not in row, col and region
                // style of this text field and insert the value in it
                tf[row][col].setText(""+randNumber);
                tf[row][col].setBackground(Color.CYAN);
                tf[row][col].setEditable(false);
            }else{
                continue;
            }
            
            ++i;
        }
    
    }
    
    boolean checkRegion(int row, int col, int val){
        boolean result = true; // not in regoin
        int row1=0, row2=0, colOfVal=0;
        
        if (row == 0 || row == 1) {
            if (col < 3) {
                row1 = 0;
                row2 = 1;
                colOfVal = 3;
            }else{
                row1 = 0;
                row2 = 1;
                colOfVal = 2;
            }
        }else if (row == 2 || row == 3) {
            if (col < 3) {
                row1 = 2;
                row2 = 3;
                colOfVal = 3;
            }else{
                row1 = 2;
                row2 = 3;
                colOfVal = 2;
            }
        }else if(row == 4 || row == 5){
            if (col < 3) {
                row1 = 4;
                row2 = 5;
                colOfVal = 3;
            }else{
                row1 = 4;
                row2 = 5;
                colOfVal = 2;
            }
        }
        
        
        ArrayList<Integer> getNumbers = checkNum.foundInRigon(row1, row2, colOfVal);
        
        if (getNumbers.size() > 0) {
            for (int i = 0; i < getNumbers.size(); i++) {
                if (getNumbers.get(i) == val ) {
                    return false;
                }
            }
        }
        return result;
    }
    
    void tfAction(){
        tf[0][0].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T00ActionPerformed(evt);
                        } });
        tf[0][1].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T01ActionPerformed(evt);
                        } });
        tf[0][2].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T02ActionPerformed(evt);
                        } });
        tf[0][3].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T03ActionPerformed(evt);
                        } });
        tf[0][4].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T04ActionPerformed(evt);
                        } });
        tf[0][5].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T05ActionPerformed(evt);
                        } });
        tf[1][0].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T10ActionPerformed(evt);
                        } });
        tf[1][1].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T11ActionPerformed(evt);
                        } });
        tf[1][2].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T12ActionPerformed(evt);
                        } });
        tf[1][3].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T13ActionPerformed(evt);
                        } });
        tf[1][4].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T14ActionPerformed(evt);
                        } });
        tf[1][5].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T15ActionPerformed(evt);
                        } });
        tf[2][0].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T20ActionPerformed(evt);
                        } });
        tf[2][1].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T21ActionPerformed(evt);
                        } });
        tf[2][2].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T22ActionPerformed(evt);
                        } });
        tf[2][3].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T23ActionPerformed(evt);
                        } });
        tf[2][4].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T24ActionPerformed(evt);
                        } });
        tf[2][5].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T25ActionPerformed(evt);
                        } });
        tf[3][0].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T30ActionPerformed(evt);
                        } });
        tf[3][1].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T31ActionPerformed(evt);
                        } });
        tf[3][2].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T32ActionPerformed(evt);
                        } });
        tf[3][3].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T33ActionPerformed(evt);
                        } });
        tf[3][4].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T34ActionPerformed(evt);
                        } });
        tf[3][5].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T35ActionPerformed(evt);
                        } });
        tf[4][0].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T40ActionPerformed(evt);
                        } });
        tf[4][1].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T41ActionPerformed(evt);
                        } });
        tf[4][2].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T42ActionPerformed(evt);
                        } });
        tf[4][3].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T43ActionPerformed(evt);
                        } });
        tf[4][4].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T44ActionPerformed(evt);
                        } });
        tf[4][5].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T45ActionPerformed(evt);
                        } });
        tf[5][0].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T50ActionPerformed(evt);
                        } });
        tf[5][1].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T51ActionPerformed(evt);
                        } });
        tf[5][2].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T52ActionPerformed(evt);
                        } });
        tf[5][3].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T53ActionPerformed(evt);
                        } });
        tf[5][4].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T54ActionPerformed(evt);
                        } });
        tf[5][5].addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            T55ActionPerformed(evt);
                        } });
        
    }

private CheckNumbers checkNum; 


//.............................................................
    // ...............................................................



private void T00ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =0 ;
    int col = 0;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T01ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =0 ;
    int col = 1;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T02ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =0 ;
    int col = 2;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T03ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =0 ;
    int col = 3;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T04ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =0 ;
    int col = 4;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T05ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =0 ;
    int col = 5;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T10ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =1 ;
    int col = 0;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T11ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =1 ;
    int col = 1;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T12ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =1 ;
    int col = 2;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T13ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =1 ;
    int col = 3;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T14ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =1 ;
    int col = 4;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T15ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =1 ;
    int col = 5;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(0,1,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T20ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =2 ;
    int col = 0;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T21ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =2 ;
    int col = 1;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T22ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =2 ;
    int col = 2;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T23ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =2 ;
    int col = 3;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T24ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =2 ;
    int col = 4;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T25ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =2 ;
    int col = 5;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T30ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =3 ;
    int col = 0;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T31ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =3 ;
    int col = 1;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T32ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =3 ;
    int col = 2;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T33ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =3 ;
    int col = 3;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T34ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =3 ;
    int col = 4;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T35ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =3 ;
    int col = 5;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(2,3,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T40ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =4 ;
    int col = 0;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T41ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =4 ;
    int col = 1;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T42ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =4 ;
    int col = 2;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T43ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =4 ;
    int col = 3;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T44ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =4 ;
    int col = 4;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T45ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =4 ;
    int col = 5;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T50ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =5 ;
    int col = 0;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T51ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =5 ;
    int col = 1;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T52ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =5 ;
    int col = 2;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,3);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T53ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =5 ;
    int col = 3;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T54ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =5 ;
    int col = 4;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}
private void T55ActionPerformed(java.awt.event.ActionEvent evt) {
    int row =5 ;
    int col = 5;
    int val = Integer.parseInt(tf[row][col].getText());
    checkNum.insertVal(row, col, val);
ArrayList<Integer> dubleNum = checkNum.foundInRigon(4,5,2);
    boolean ansCol = checkNum.foundInCol(row, col);
    boolean ansRow = checkNum.foundInRow(row, col);
    
    if (dubleNum.size() > 0) {
        for (int i = 0; i < dubleNum.size(); i++) {
            if (dubleNum.get(i) == val) {
                tf[row][col].setBackground(Color.RED);
            }
        }
    }else if (ansCol && ansRow){
        tf[row][col].setBackground(Color.GREEN);
    }else{
        tf[row][col].setBackground(Color.RED);
    }
}




//.............................................................
    // ...............................................................


private void T2ActionPerformed(java.awt.event.ActionEvent evt) {
     
        //value of text
//       String in=T2.getText();
//        
//       //change pannel color
//       //(value,COL), (value,Row) ,(value,Cell)
//       boolean e=s.colExists(in,"2") || s.rowExists(in,"1") || s.cellExists(in,"1");
//       System.out.println(e);
//       
//       if(e){
//            P2.setBackground(Color.RED);
//        } else {
//            P2.setBackground(Color.GREEN);
//            //suggested insert stmt
//        }
    }  
    
    
    private void butt_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butt_backActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_butt_backActionPerformed

    private void tf_timeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_timeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_timeActionPerformed

    private void tf_time1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_time1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_time1ActionPerformed

    
    private ImageIcon reSizeImages(String path, JLabel label){
        ImageIcon icon = new ImageIcon(path);
        Image backgraound_image = icon.getImage();
        Image backgraound_Image = backgraound_image.getScaledInstance(label.getWidth(), label.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon newicon = new ImageIcon(backgraound_Image);
        return newicon;
    }
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butt_back;
    private javax.swing.JLabel lab_time;
    private javax.swing.JLabel lab_time1;
    private javax.swing.JPanel p0;
    private javax.swing.JPanel p1;
    private javax.swing.JPanel p10;
    private javax.swing.JPanel p11;
    private javax.swing.JPanel p12;
    private javax.swing.JPanel p2;
    private javax.swing.JPanel p3;
    private javax.swing.JPanel p4;
    private javax.swing.JPanel p5;
    private javax.swing.JPanel p6;
    private javax.swing.JPanel p7;
    private javax.swing.JPanel p8;
    private javax.swing.JPanel p9;
    private javax.swing.JTextField tf_time;
    private javax.swing.JTextField tf_time1;
    // End of variables declaration//GEN-END:variables
    private JTextField[][] tf;
    
}






/*

 for (int i = 0; i < dubleNum.size(); i++) {
            for (int j = 0; j < 2; j++) {
                for (int k = 0; k < 3; k++) {
                    if (dubleNum.get(i) == Integer.parseInt(tf[j][k].getText())) {
                        tf[j][k].setBackground(Color.RED);
                    }
                }
            }
        }




*/